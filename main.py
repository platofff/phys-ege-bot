import asyncio
import signal
import sys
from datetime import datetime, timedelta
import shelve
import os
import random

from aiogram import Bot, Dispatcher, types

BOT_TOKEN = os.getenv('TOKEN')
db = shelve.open(os.path.join('db', 'db'), writeback=True)
tasks_set = set(db['tasks'].keys())
bot: Bot
solving_now = {}
solved_now = {}
invalid_now = {}
session_start = {}
last_active = {}
rows = {}
rows_record = []
basic_emoji = ['üòè', 'üòå', '‚ò∫', 'üòá']
advanced_emoji = ['üòÆ', 'ü§Ø', 'üòé', 'ü§ì']
valid_emoji = ['üí™', 'üëç', 'ü§ó', 'ü§§', 'üçÜ', 'ü§©', 'üòà', '‚úÖ', 'ü•≥']
invalid_emoji = ['üö´', 'üò°', 'üò®', 'ü§´', 'ü§°', 'üí©', '‚ùå']


def strfdelta(tdelta):
    fmt = "{hours}:{minutes:02d}:{seconds:02d}"
    d = {"days": tdelta.days}
    d["hours"], rem = divmod(tdelta.seconds, 3600)
    d["minutes"], d["seconds"] = divmod(rem, 60)
    return fmt.format(**d)


async def end_session_stats(tasks_count: int, session_len: timedelta, valid_percent: int, event: types.Message):
    await event.answer(
        f'{random.choice(valid_emoji)} –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: <b>{tasks_count}</b> ({valid_percent}%)\n'
        f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: <b>{strfdelta(session_len)}</b>\n'
        f'–ù–µ –∑–∞–±—ã–≤–∞–π –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è ü§ì', parse_mode=types.ParseMode.HTML)


async def no_active_handler(event: types.Message):
    await asyncio.sleep(601)
    if (datetime.now() - last_active[event.from_user["id"]]).seconds > 600 and event.from_user["id"] in solved_now.keys():
        tasks_count, session_len, valid_percent = await end_session(event, True)
        await event.answer('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç). '
                           '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–µ –Ω–∞–ø–∏—à–∏ <b>/–∑–∞–¥–∞—á–∏</b> —Å–Ω–æ–≤–∞',
                           parse_mode=types.ParseMode.HTML)
        await end_session_stats(tasks_count, session_len, valid_percent, event)
        solved_now.pop(event.from_user["id"], None)


async def task_handler(event: types.Message):
    if event.text.startswith('/'):
        session_start.update({event.from_user["id"]: datetime.now()})
        last_active.update({event.from_user["id"]: datetime.now()})
        asyncio.get_running_loop().create_task(no_active_handler(event))
        rows.update({event.from_user["id"]: 0})
        solved_now.update({event.from_user["id"]: 0})
        invalid_now.update({event.from_user["id"]: 0})
        await event.answer('–ß—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤–≤–µ–¥–∏ <b>/—Å—Ç–æ–ø</b>', parse_mode=types.ParseMode.HTML)
    if not event.from_user['id'] in db['users'].keys():
        db['users'].update({event.from_user['id']: {'done_tasks': [],
                                                    'max_times_row': 0,
                                                    'max_session': 0,
                                                    'valid_solutions': 0}})
    if event.from_user["id"] in solving_now.keys():
        task = solving_now[event.from_user['id']]
    else:
        available_tasks = list(tasks_set - set(db['users'][event.from_user['id']]['done_tasks']))
        if not available_tasks:
            available_tasks.append(db['users'][event.from_user['id']]['done_tasks'].pop(0))
        task = random.choice(available_tasks)
    with open(os.path.join('tasks', f'{task}.png'), 'rb') as f:
        await bot.send_photo(chat_id=event.chat.id, photo=f)
    solving_now.update({event.from_user['id']: task})
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(types.KeyboardButton(text='/—Å—Ç–æ–ø'))
    if db['tasks'][task]['taskTypeId'] == 2:
        keyboard.add('1')
        keyboard.add('2')
        keyboard.add('3')
        keyboard.add('4')
    await event.answer(
        f"–£—Ä–æ–≤–µ–Ω—å –∑–∞–¥–∞—á–∏: {db['tasks'][task]['levelName']} "
        f"{random.choice(basic_emoji) if db['tasks'][task]['levelName'].startswith('–ë–∞–∑–æ–≤—ã–π') else random.choice(advanced_emoji)}",
        reply_markup=keyboard)


async def end_session(event: types.Message, from_timeout=False):
    session = datetime.now() - session_start[event.from_user['id']]
    session_len = session.seconds
    if from_timeout:
        session_len -= 600
    try:
        if db['users'][event.from_user['id']]['max_session'] < solved_now[event.from_user['id']]:
            db['users'][event.from_user['id']]['max_session'] = solved_now[event.from_user['id']]
            msg = f'–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á, —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞ —Å–µ—Å—Å–∏—é {random.choice(valid_emoji)}\n'
        else:
            msg = ''
    except KeyError:
        msg = ''
    if session_len >= 2760:
        msg += f'–•–æ—Ä–æ—à–∞—è —É—Å–∏–¥—á–∏–≤–æ—Å—Ç—å! {random.choice(valid_emoji)}\n'
    if event.from_user['id'] in rows_record:
        rows_record.pop(rows_record.index(event.from_user['id']))
        msg += f'–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: {db["users"][event.from_user["id"]]["max_times_row"]} ' \
               f'–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥! {random.choice(valid_emoji)}'
    if msg:
        await event.answer(msg)
    return solved_now[event.from_user['id']], session, \
           int(solved_now[event.from_user['id']] / (
                       solved_now[event.from_user['id']] + invalid_now[event.from_user['id']]) * 100)


async def solution_handler(event: types.Message):
    if event.text == '/—Å—Ç–æ–ø':
        await end_session_stats(*(await end_session(event)), event)
        solved_now.pop(event.from_user["id"], None)
    elif event.from_user['id'] in solving_now.keys() and not event.text.startswith('/'):
        last_active.update({event.from_user["id"]: datetime.now()})
        asyncio.get_running_loop().create_task(no_active_handler(event))
        if event.text == db['tasks'][solving_now[event.from_user['id']]]['answer']:
            solved_now[event.from_user['id']] += 1
            rows[event.from_user["id"]] += 1
            if rows[event.from_user["id"]] > db['users'][event.from_user["id"]]['max_times_row']:
                rows_record.append(event.from_user["id"])
                db['users'][event.from_user["id"]]['max_times_row'] = rows[event.from_user["id"]]
            db['users'][event.from_user['id']]['valid_solutions'] += 1
            db['users'][event.from_user['id']]['done_tasks'].append(solving_now[event.from_user['id']])
            await event.answer(f'{random.choice(valid_emoji)} –í–µ—Ä–Ω–æ')
            if rows[event.from_user["id"]] % 5 == 0:
                await event.answer(f'{rows[event.from_user["id"]]} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥ {random.choice(valid_emoji)}')
        else:
            rows[event.from_user["id"]] = 0
            invalid_now[event.from_user["id"]] += 1
            await event.answer(
                f"{random.choice(invalid_emoji)} –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {db['tasks'][solving_now[event.from_user['id']]]['answer']}")
        solving_now.pop(event.from_user['id'], None)
        await task_handler(event)


async def start_handler(event: types.Message):
    await event.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {event.from_user.get_mention(as_html=True)} üëã! "
        f"–ù–∞–ø–∏—à–∏ –º–Ω–µ <b>/–∑–∞–¥–∞—á–∏</b> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ —Ñ–∏–∑–∏–∫–µ ü§ì\n"
        f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: <b>/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
        parse_mode=types.ParseMode.HTML)


async def stats_handler(event: types.Message):
    await event.answer(f'–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: <b>{db["users"][event.from_user["id"]]["valid_solutions"]}</b>\n'
                       f'–ú–∞–∫—Å–∏–º—É–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: <b>{db["users"][event.from_user["id"]]["max_session"]}</b>\n'
                       f'–ú–∞–∫—Å–∏–º—É–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥: <b>{db["users"][event.from_user["id"]]["max_times_row"]}</b>',
                       parse_mode=types.ParseMode.HTML)


async def main():
    global bot
    bot = Bot(token=BOT_TOKEN)
    try:
        disp = Dispatcher(bot=bot)
        disp.register_message_handler(start_handler, commands={'start', 'restart', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å'})
        disp.register_message_handler(task_handler, commands={'tasks', '–∑–∞–¥–∞—á–∏'})
        disp.register_message_handler(stats_handler, commands={'stats', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'})
        disp.register_message_handler(solution_handler)
        await disp.start_polling()
    finally:
        await bot.close()
        db.close()


def signal_handler(sig, frame):
    db.close()
    sys.exit(0)


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    asyncio.run(main())
